<container class="container">
  <!-- Loop over each object in the users array from resultsRoutes.js to create a user card with the results -->
  {{#with users as |user| }}
  <div class="rela-block profile-container">
    <div class="rela-block profile-card">
      <container class="button-container d-flex justify-content-around">
        <button type="button" class="button friends-button" data-bs-toggle="modal"
          data-bs-target="#chatModal">Chat</button>
        <button class="button edit-profile-button">Edit Profile</button>
      </container>
      <div class="profile-pic" style="background-image: url('/images/userplaceholder.png');" class="profile-image"
        id="profile_pic"></div>
      <div class="rela-block profile-name-container">
        <div class="rela-block user-name" id="user_name">{{user.first_name}} {{user.last_name}}</div>
        <div class="rela-block user-desc" id="user_description">
          <ul class="profile-list">
            <li>{{user.city}}</li>
            <li>{{user.gender}}</li>
            <li>{{user.fitness_level}}</li>
            <li>{{gym.name}}</li>
            <li>{{user.availability}}</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
  </div>
  </div>
  {{/with}}
</container>

{{!-- Chat Modal that displays when the chat button is clicked on --}}
<div class="modal fade" id="chatModal" aria-hidden="true" aria-labelledby="exampleModalToggleLabel" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalToggleLabel">Chat List</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Chat Select -->
        <form id="signup-form">
          <div class="row mb-2">
            <div class="col">
              <label for="state-input" class="form-label">Friends</label>
              <select id="friend-input" class="form-select">
                <option selected>Choose...</option>
                <option value="1">Johnny Gree</option>
                <option value="2">Sandra Brown</option>
                <option value="3">Sophia Karnes</option>
                <option value="4">Sal Bologna</option>
                <option value="5">Rad Thad</option>
                <option value="6">Amanda Bynes</option>
                <option value="7">Lawrence Culver</option>
                <option value="8">Michelle Greene</option>
                <option value="9">Joey Tirado</option>
                <option value="10">Jeff Little</option>
              </select>
            </div>
          </div>
        </form>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary" data-bs-target="#exampleModalToggle2" data-bs-toggle="modal"
          data-bs-dismiss="modal">Chat Now</button>
      </div>
    </div>
  </div>
</div>
{{!-- Second Chat Modal --}}
<div class="modal fade" id="exampleModalToggle2" aria-hidden="true" aria-labelledby="exampleModalToggleLabel2"
  tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalToggleLabel2">Chat</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- container element in which TalkJS will display a chat UI -->
        <div id="talkjs-container" style="width: 90%; margin: 30px; height: 500px">
          <i>Loading chat...</i>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary" data-bs-target="#exampleModalToggle" data-bs-toggle="modal"
          data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
{{!-- Talk JS Modal --}}
<script>
  (function (t, a, l, k, j, s) {
    s = a.createElement('script'); s.async = 1; s.src = "https://cdn.talkjs.com/talk.js"; a.head.appendChild(s)
      ; k = t.Promise; t.Talk = {
        v: 3, ready: {
          then: function (f) {
            if (k) return new k(function (r, e) { l.push([f, r, e]) }); l
              .push([f])
          }, catch: function () { return k && new k() }, c: l
        }
      };
  })(window, document, []);
</script>
<script src="/js/talk.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"
  integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"
  integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>